import { useEffect, useMemo, useRef, useState } from 'react';
import { FormInstance } from 'antd';

// import './PlayerChipsReport.scss';
import TableReport from '@/components/table-report/TableReport';
import { FilterInputType, FilterItem } from '@/components/shared/filter/Filter';
import { useAppDispatch } from '@/store/hooks';
import { TableColumnType } from '@/components/shared/table/Table';
import { countDataInPlayerLoyalityPointsReport, getListTable, listDataInPlayerChipsReport, listDataInPlayerLoyalityPointsReport } from '../../store/action';
import { useBusyContext } from '@/components/shared/busy';
import dayjs from "@/core/dayjs";

const columns: TableColumnType[] = [
  {
    title: 'S No.',
    dataIndex: 'NO.'
  },
  {
    title: 'UserName',
    dataIndex: 'userName'
  },
  {
    title: 'Date And Time',
    dataIndex: 'dateFormated'
  },
  {
    title: 'Rake Generated by player',
    dataIndex: 'rakeAmount'
  },
  {
    title: 'VIP Level',
    dataIndex: 'megaPointLevelName'
  },
  {
    title: 'VIP Points Earned',
    dataIndex: 'earnedPoints'
  },
  {
    title: 'Channel Name',
    dataIndex: 'channelName'
  }
];

const LoyalityLevel = [
  {
    label: 'Bronze',
    value: 1
  },
  {
    label: 'Chrome',
    value: 2
  },
  {
    label: 'Silver',
    value: 3
  },
  {
    label: 'Gold',
    value: 4
  },
  {
    label: 'Diamond',
    value: 5
  },
  {
    label: 'Platinum',
    value: 6
  }
]

const Page = () => {
  const dispatch = useAppDispatch();
  const bs = useBusyContext();
  const formRef = useRef<FormInstance>(null);
  const [tables, setTables] = useState<any[]>([]); 
  useEffect(() => {
    getTables();
  }, [])

  const getTables = async () => {
    try {
      bs.showBusy();
      const res = await dispatch(getListTable({
        "isRealMoney":"true",
        "channelType":"NORMAL"
      }));
      setTables(res.payload)
    } finally {
      bs.hideBusy();
    }
  }

  const getData = async (values: any) => {
    const res = await dispatch(listDataInPlayerLoyalityPointsReport({
      ...values,
    }));
    const dataWithNo = res.payload.map((item: any, index: number) => ({
      ...item,
      'NO.': index + 1,
      'dateFormated': dateFormated(item.date),
      'megaPointLevelName': megaPointLevelName(item.megaPointLevel)
    }))
    return {
      // data: res.payload as any[],
      data: dataWithNo as any[]
    }
  }

  const dateFormated = (date: any) => {
    return dayjs(date).format('MMM DD, YYYY HH:mm:ss A')
  }

  const megaPointLevelName = (megaPointLevel: any) => {
    let level = LoyalityLevel.find(x => x.value === megaPointLevel);
    return level?.label;
  }

  const getTotal = (values: any) => {
    return dispatch(countDataInPlayerLoyalityPointsReport(values)).then(res => res.payload)
  }

  const FilterFields: FilterItem[] = useMemo(() => ([
    {
      name: 'userName',
      type: FilterInputType.Input,
      inputProps: {
        placeholder: 'User Name'
      }
    },
    {
      name: 'startDate',
      type: FilterInputType.Date,
      inputProps: {
        placeholder: 'Start date'
      }
    },
    {
      name: 'endDate',
      type: FilterInputType.Date,
      inputProps: {
        placeholder: 'End date'
      }
    },
    {
      name: 'channelId',
      type: FilterInputType.Select,
      inputProps: {
        placeholder: 'Select channel',
        options: tables.map(item => ({
          label: item.channelName,
          value: item._id
        }))
      }
    }
  ]), [formRef.current, tables])

  return (
    <TableReport
      title='Player Loyality Points Report'
      formRef={formRef}
      columns={columns}
      filterFields={FilterFields}
      getData={getData}
      getTotal={getTotal}
      firstLoad={false}
    />
  )
};
export default Page;